using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        CricketTeam team = new CricketTeam();

        // Adding players
        team.AddPlayer(new Player(1, "John", 25));
        team.AddPlayer(new Player(2, "Alice", 22));
        // ... Add more players

        // Removing a player by Id
        team.RemovePlayerById(1);

        // Getting player details by Id
        Player playerById = team.GetPlayerById(2);
        Console.WriteLine($"Player details by Id: {playerById}");

        // Getting player details by name
        List<Player> playersByName = team.GetPlayersByName("Alice");
        Console.WriteLine("Player details by Name:");
        foreach (var player in playersByName)
        {
            Console.WriteLine(player);
        }

        // Getting all player details
        List<Player> allPlayers = team.GetAllPlayers();
        Console.WriteLine("All Players:");
        foreach (var player in allPlayers)
        {
            Console.WriteLine(player);
        }
    }
}

class CricketTeam
{
    private List<Player> players = new List<Player>();

    public void AddPlayer(Player player)
    {
        if (players.Count < 11)
        {
            players.Add(player);
            Console.WriteLine($"Player {player.Name} added to the team.");
        }
        else
        {
            Console.WriteLine("Cannot add more than 11 players to the team.");
        }
    }

    public void RemovePlayerById(int playerId)
    {
        Player playerToRemove = players.FirstOrDefault(p => p.Id == playerId);
        if (playerToRemove != null)
        {
            players.Remove(playerToRemove);
            Console.WriteLine($"Player with Id {playerId} removed from the team.");
        }
        else
        {
            Console.WriteLine($"Player with Id {playerId} not found in the team.");
        }
    }

    public Player GetPlayerById(int playerId)
    {
        return players.FirstOrDefault(p => p.Id == playerId);
    }

    public List<Player> GetPlayersByName(string playerName)
    {
        return players.Where(p => p.Name.Equals(playerName, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    public List<Player> GetAllPlayers()
    {
        return players;
    }
}

class Player
{
    public int Id { get; }
    public string Name { get; }
    public int Age { get; }

    public Player(int id, string name, int age)
    {
        Id = id;
        Name = name;
        Age = age;
    }

    public override string ToString()
    {
        return $"Id: {Id}, Name: {Name}, Age: {Age}";
    }
}